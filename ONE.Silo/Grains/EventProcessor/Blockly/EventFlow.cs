using ONE.Silo.Grains.OdinEventProcessorService.Blocks;
using System;
using System.Threading.Tasks;

namespace ONE.Silo.Grains.EventProcessor.Blockly
{
    // A delegate type for hooking up event flow completed notifications.
    public delegate void EventFlowCompletedEventHandler(object sender, EventArgs e);

    public class EventFlow
    {

        /// <summary>
        /// Occurs when [event flow completed].
        /// </summary>
        public event EventFlowCompletedEventHandler EventFlowCompleted;

        /// <summary>
        /// Gets the root event block.
        /// </summary>
        /// <value>
        /// The root event block.
        /// </value>
        public ONEConfigurationEventBlock RootEventBlock
        {
            get
            {
                return _rootEventBlock;
            }
        }
        private ONEConfigurationEventBlock _rootEventBlock;

        /// <summary>
        /// Gets or sets the event flow task.
        /// </summary>
        /// <value>
        /// The event flow task.
        /// </value>
        public Task EventFlowTask { get; set; }

        #region Event Flow Keys
        /// <summary>
        /// Gets or sets the event tracking unique identifier.
        /// </summary>
        /// Global tracking Guid is generated by System Input and it is carried through interpretor to processor
        public Guid GlobalTrackingGuid { get; set; }
        public Guid EventInstanceGUID { get; set; }  //This is generated when the event is to the processor by the interpreter
        public Guid EventFlowGUID { get; set; }
        public Guid InitiatorGUID { get; set; }
        public Models.Enumerations.EventType EventType { get; set; }
        public string FlowConfigurationXml { get; set; }
        public string EventFlowGeneratedModel { get; set; }
        public string SQLQueryForExecution { get; set; }
        public string HTTPClientURL { get; set; }

        #endregion Event Flow Keys

        /// <summary>
        /// Initializes a new instance of the <see cref="EventFlow"/> class.
        /// </summary>
        /// <param name="rootEventBlock">The root event block.</param>
        public EventFlow(ONEConfigurationEventBlock rootEventBlock, Guid globalTrackingGuid, Guid eventInstanceGUID, Guid eventFlowGUID, Guid initiatorGUID, Models.Enumerations.EventType eventType, string flowConfigurationXml)
        {
            //Set the root event block
            _rootEventBlock = rootEventBlock;

            //Set the keys of the event flow
            GlobalTrackingGuid = globalTrackingGuid;
            EventInstanceGUID = eventInstanceGUID;
            EventFlowGUID = eventFlowGUID;
            InitiatorGUID = initiatorGUID;
            EventType = eventType;
            FlowConfigurationXml = flowConfigurationXml;

            //Set the event flow of the root event block
            rootEventBlock.EventFlow = this;

            //Set the event flow task
            EventFlowTask = new Task(() => { _rootEventBlock.ExecuteFlow(); });

            //Continue with the on event flow completed 
            EventFlowTask.ContinueWith((i) => { OnEventFlowCompleted(EventArgs.Empty); });
        }

        /// <summary>
        /// Raises the <see cref="E:EventFlowCompleted" /> event.
        /// </summary>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        protected virtual void OnEventFlowCompleted(EventArgs e)
        {
            if (EventFlowCompleted != null)
            {
                //Only fire the event flow completed if the flow has not already been halted.
                //If it is has already been halted, we don't want to do anything else with this flow
                if (this.RootEventBlock == null || (this.RootEventBlock != null && !this.RootEventBlock.IsEventFlowHalted))
                {
                    EventFlowCompleted(this, e);
                }
            }
        }
    }
}
